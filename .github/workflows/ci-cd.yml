name: Laravel CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger la pipeline sur les pushes vers la branche master
  pull_request:
    branches:
      - master  # Trigger également sur les pull requests vers la branche master

jobs:
  # Job pour les tests
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: Serigne@123
          MYSQL_DATABASE: laravel-ci-cd
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, mysql, pdo, pdo_mysql, intl
          coverage: none

      - name: Install dependencies via Composer
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      # Ajout d'un délai d'attente pour garantir que MySQL est prêt
      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL to be ready..."
          until mysqladmin ping -h 127.0.0.1 --silent; do
            echo "Still waiting for MySQL...";
            sleep 5;
          done
          echo "MySQL is up and running!"

      # Vérification manuelle de la connexion MySQL (pour debug)
      - name: Test MySQL connection
        run: |
          echo "Testing MySQL connection..."
          mysql -h 127.0.0.1 -u smtAdmin -pSerigne@123 -e "SHOW DATABASES;"

      # Exécution des migrations avec plus de logs pour le debug
      - name: Run migrations
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: laravel-ci-cd
          DB_USERNAME: smtAdmin
          DB_PASSWORD: Serigne@123
        run: php artisan migrate --seed -vvv

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --testdox

  # Job pour le déploiement
  deploy:
    runs-on: ubuntu-latest
    needs: test  # Ne déploie que si les tests passent
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Deploy to server
        run: |
          echo "Déploiement en cours..."
          # Ajoute ici le script de déploiement, par exemple scp, rsync, ou déploiement via SSH
